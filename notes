Unsure of why there is a lib.rs file
I think so there is a clear seperation of front end and backend?
But maybe I can just run a binary that is db communication? Info out info in?
Just starts an inifinite loop that takes in string info and turns it into db commands?
Set up the db connection, with ability to send messages to it.
then run event loop which grabs messages and actually sends it over. over stdin. stdin to json I guess?
Maybe I should just pass around strings instead of json?
Or maybe just pass around json instead of DB messages as strings passed to json and back and forth.
Wut?
check message part fails when multiple things are added to the vectors.
FIxed check message part
Rest API ideas, look here: https://www.codementor.io/@sagaragarwal94/building-a-basic-restful-api-in-python-58k02xsiq
You can do GET PUT POST DELETE traits rest api calls for different structs. sound good? maybe lol. You might need trait return generics? trait input generics?
Creates a fake? rest api? lol is that a crate idea? Maybe, its something to look at.
Could it go a step futrher a be used for microservices? Maybe, built out with a yaml file for ease of use? maybe
Return type specified? Maybe
Professor recommended I focus on my structs
Class now has all the proper tests
Working on tests for race now. Just gotta do the Vec<String> parsing to be able to actually get a race, in order to do my testing.
Huh wasn't actually done with race, but I am now. So lets move to writting tests for race.
Forgot random races, dang. Go back and fix that